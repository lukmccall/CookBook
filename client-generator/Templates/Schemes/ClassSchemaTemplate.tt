<#@ template language="C#"         #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Models" #>
class <#= _name #> {
<#
    foreach (var (name, type) in _properties)
    {
#>    <#= name #><#
        if (_requiredProperties.Contains(name))
        {
#>?<#
        } #>: <#= type.GetName() #>;
<#
    }

    if (_properties.Any())
    {
#>

    constructor(data: any) {
<#
        foreach (var (name, type) in _properties)
        {
            if (type.GetSchemaType() != SchemaType.Array)
            {
#>
        this.<#= name #> = data["<#= name #>"];
<#
            }
            else
            {
#>
        this.<#= name #> = [] as any;
        if (Array.isArray(data["<#= name #>"])) {
            for (let _item of data["<#= name #>"]) {
<#
                if (!_requiredProperties.Contains(name))
                {
#>
                this.<#= name #>.push(_item);
<#
                }
                else
                {
#>
                this.<#= name #>!!.push(_item);
<#
                }
#>
                
            }
        }
<#
            }
        }
#>
    }

    static fromResponse(data?: any): <#= _name #> {
        const _data = typeof data === 'object' ? data : {};
        const _response = new <#= _name #>(_data);        
        return _response;
    }
<#
    }
#>
}