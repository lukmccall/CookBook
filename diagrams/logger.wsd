@startuml Logger

skinparam linetype ortho

namespace Logger {

enum LogLevel {
  None
  Debug
  Info
  Warn
  Error
  Fatal
}

class DiagnosticInfo {
  +functionName : String
  +className : String
}

class AbstractLogger <<abstract>> {
  -_logStrategy : ILogStrategy
  -_nextLogge : AbstractLogger
  #logLevel : LogLevel
  +Init() : AbstractLogger
  +SetNextLogger(AbstractLogger)
  +WriteMessage(LogLevel, String)
}

class DiagnosticLogger {
  -GetDiagnosticInfo() : DiagnosticInfo
}

interface ILogger {
  +Debug(String)
  +Error(String)
  +Fatal(String)
  +Info(String)
  +Warn(String)
}

interface ILogStrategy {
  +WriteMessage()
}

class FileLogStrategy {
  -_path : String
} 

class ConsoleLogStrategy 

class LoggerFacade<T extend AbstractLogger> {}
note right of LoggerFacade 
  Fasada pozwala równie stworzyć Logger z wybraną 
  implementacją podaną jako parametr szablonu 
endnote

class RawLogger {}

RawLogger -[hidden]-- DiagnosticLogger
DiagnosticLogger --- DiagnosticInfo
AbstractLogger <|.l.. RawLogger
AbstractLogger <|.l.. DiagnosticLogger

AbstractLogger o- AbstractLogger 

AbstractLogger -r-- LogLevel 

ConsoleLogStrategy -l- FileLogStrategy
ILogStrategy <|.d.. (ConsoleLogStrategy, FileLogStrategy) 
AbstractLogger "1" o-- "1" ILogStrategy

ILogger <|... LoggerFacade
LoggerFacade --- AbstractLogger

}
@enduml